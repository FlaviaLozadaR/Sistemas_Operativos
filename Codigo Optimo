#include <stdio.h>

// Busca si la página ya está en los marcos
int buscarPagina(int marco[], int marcos, int pagina) {
    for (int i = 0; i < marcos; i++)
        if (marco[i] == pagina)
            return 1; // encontrada
    return 0; // no encontrada
}

// Predice cuál página será reemplazada (la que se usará más lejos en el futuro)
int predecir(int paginas[], int marco[], int num_pags, int marcos, int index) {
    int farthest = -1, res = 0;
    for (int i = 0; i < marcos; i++) {
        int j;
        for (j = index; j < num_pags; j++) {
            if (marco[i] == paginas[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j == num_pags)
            return i; // página que no se volverá a usar
    }
    return res;
}

// Implementación del algoritmo Óptimo
void optimo(int paginas[], int num_pags, int marcos) {
    int marco[marcos], fallos = 0;

    // Inicializar marcos vacíos
    for (int i = 0; i < marcos; i++)
        marco[i] = -1;

    printf("\n---- Algoritmo ÓPTIMO ----\n");
    for (int i = 0; i < num_pags; i++) {
        if (!buscarPagina(marco, marcos, paginas[i])) {
            int j;
            // Si hay marcos vacíos, ocupar uno
            for (j = 0; j < marcos; j++) {
                if (marco[j] == -1) {
                    marco[j] = paginas[i];
                    break;
                }
            }
            // Si no hay espacio libre, usar predicción
            if (j == marcos)
                marco[predecir(paginas, marco, num_pags, marcos, i + 1)] = paginas[i];

            fallos++;
        }

        // Mostrar estado actual de los marcos
        printf("Pág %2d -> ", paginas[i]);
        for (int k = 0; k < marcos; k++) {
            if (marco[k] != -1)
                printf("%2d ", marco[k]);
            else
                printf("-- ");
        }
        printf("\n");
    }

    printf("Fallos de página: %d\n", fallos);
}

// Programa principal
int main() {
    int paginas[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};
    int num_pags = sizeof(paginas) / sizeof(paginas[0]);
    int marcos = 3;

    optimo(paginas, num_pags, marcos);

    return 0;
}
