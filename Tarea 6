#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

int main() {
    int pipe1[2], pipe2[2];  // Dos pipes: uno para cada hijo
    pid_t pid1, pid2;

    // Crear los pipes
    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        perror("Error al crear el pipe");
        exit(1);
    }

    // Crear el primer hijo
    pid1 = fork();
    if (pid1 < 0) {
        perror("Error al crear hijo 1");
        exit(1);
    }

    if (pid1 == 0) {
        // Código del hijo 1
        close(pipe1[1]); // Cerramos el extremo de escritura
        char mensaje1[100];
        read(pipe1[0], mensaje1, sizeof(mensaje1));
        printf("Hijo 1 recibió: %s\n", mensaje1);
        close(pipe1[0]);
        exit(0);
    }

    // Crear el segundo hijo
    pid2 = fork();
    if (pid2 < 0) {
        perror("Error al crear hijo 2");
        exit(1);
    }

    if (pid2 == 0) {
        // Código del hijo 2
        close(pipe2[1]); // Cerramos el extremo de escritura
        char mensaje2[100];
        read(pipe2[0], mensaje2, sizeof(mensaje2));
        printf("Hijo 2 recibió: %s\n", mensaje2);
        close(pipe2[0]);
        exit(0);
    }

    // Código del proceso padre
    close(pipe1[0]); // Cerramos el extremo de lectura del pipe 1
    close(pipe2[0]); // Cerramos el extremo de lectura del pipe 2

    char msj1[] = "Hola hijo 1, soy tu padre.";
    char msj2[] = "Hola hijo 2, soy tu padre.";

    write(pipe1[1], msj1, strlen(msj1) + 1);
    write(pipe2[1], msj2, strlen(msj2) + 1);

    close(pipe1[1]);
    close(pipe2[1]);

    // Esperar a que terminen los hijos
    wait(NULL);
    wait(NULL);

    return 0;
}
