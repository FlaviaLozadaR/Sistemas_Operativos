#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pagina;  // número de página cargada en el marco, -1 si vacío
    int bitR;    // bit de referencia (0/1)
} Marco;

void reloj(int paginas[], int num_pags, int marcos) {
    if (marcos <= 0) {
        printf("Cantidad de marcos invalida.\n");
        return;
    }

    Marco *marco = (Marco *)calloc((size_t)marcos, sizeof(Marco));
    if (!marco) {
        perror("calloc");
        return;
    }

    int puntero = 0, fallos = 0;

    // Inicialización
    for (int i = 0; i < marcos; i++) {
        marco[i].pagina = -1;
        marco[i].bitR = 0;
    }

    printf("\n---- Algoritmo RELOJ ----\n");
    for (int i = 0; i < num_pags; i++) {
        int p = paginas[i];
        int presente = 0;

        // Buscar página (hit)
        for (int j = 0; j < marcos; j++) {
            if (marco[j].pagina == p) {
                marco[j].bitR = 1;  // se usó recientemente
                presente = 1;
                break;              // <- importante: cortar aquí
            }
        }

        // Miss: aplicar política de reloj
        if (!presente) {
            while (marco[puntero].bitR == 1) {
                marco[puntero].bitR = 0;                // dar segunda oportunidad
                puntero = (puntero + 1) % marcos;       // avanzar el reloj
            }
            // Reemplazo en el primer marco con bitR == 0
            marco[puntero].pagina = p;
            marco[puntero].bitR = 1;
            puntero = (puntero + 1) % marcos;
            fallos++;
        }

        // Mostrar estado
        printf("Pág %2d -> ", p);
        for (int k = 0; k < marcos; k++) {
            if (marco[k].pagina == -1) printf("[--|%d] ", marco[k].bitR);
            else                        printf("[%2d|%d] ", marco[k].pagina, marco[k].bitR);
        }
        printf("\n");
    }

    printf("Fallos de página: %d\n", fallos);
    free(marco);
}

int main(void) {
    // Ejemplo clásico
    int paginas[] = {7,0,1,2,0,3,0,4,2,3,0,3,2};
    int num_pags = (int)(sizeof(paginas) / sizeof(paginas[0]));
    int marcos = 3;

    reloj(paginas, num_pags, marcos);
    return 0;
}
